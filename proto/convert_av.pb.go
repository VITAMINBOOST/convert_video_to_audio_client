// Code generated by protoc-gen-go. DO NOT EDIT.
// source: convert_av.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb0a6ba7e18cd13b, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type ConvertVideoToAudioRequest struct {
	SourceVideoURL       string   `protobuf:"bytes,1,opt,name=SourceVideoURL,proto3" json:"SourceVideoURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertVideoToAudioRequest) Reset()         { *m = ConvertVideoToAudioRequest{} }
func (m *ConvertVideoToAudioRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertVideoToAudioRequest) ProtoMessage()    {}
func (*ConvertVideoToAudioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb0a6ba7e18cd13b, []int{1}
}

func (m *ConvertVideoToAudioRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertVideoToAudioRequest.Unmarshal(m, b)
}
func (m *ConvertVideoToAudioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertVideoToAudioRequest.Marshal(b, m, deterministic)
}
func (m *ConvertVideoToAudioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertVideoToAudioRequest.Merge(m, src)
}
func (m *ConvertVideoToAudioRequest) XXX_Size() int {
	return xxx_messageInfo_ConvertVideoToAudioRequest.Size(m)
}
func (m *ConvertVideoToAudioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertVideoToAudioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertVideoToAudioRequest proto.InternalMessageInfo

func (m *ConvertVideoToAudioRequest) GetSourceVideoURL() string {
	if m != nil {
		return m.SourceVideoURL
	}
	return ""
}

func init() {
	proto.RegisterType((*Void)(nil), "proto.Void")
	proto.RegisterType((*ConvertVideoToAudioRequest)(nil), "proto.ConvertVideoToAudioRequest")
}

func init() {
	proto.RegisterFile("convert_av.proto", fileDescriptor_bb0a6ba7e18cd13b)
}

var fileDescriptor_bb0a6ba7e18cd13b = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0xcf, 0x2b,
	0x4b, 0x2d, 0x2a, 0x89, 0x4f, 0x2c, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x4a, 0x6c, 0x5c, 0x2c, 0x61, 0xf9, 0x99, 0x29, 0x4a, 0x2e, 0x5c, 0x52, 0xce, 0x10, 0x25, 0x61,
	0x99, 0x29, 0xa9, 0xf9, 0x21, 0xf9, 0x8e, 0xa5, 0x29, 0x99, 0xf9, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x6a, 0x5c, 0x7c, 0xc1, 0xf9, 0xa5, 0x45, 0xc9, 0xa9, 0x60, 0xc9, 0xd0, 0x20,
	0x1f, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x34, 0x51, 0xa3, 0x2e, 0x46, 0x2e, 0x11, 0xb0,
	0x46, 0x97, 0xfc, 0xf2, 0xbc, 0x9c, 0xfc, 0xc4, 0x94, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54,
	0x21, 0x77, 0x2e, 0x61, 0x2c, 0xc6, 0x0b, 0x29, 0x42, 0x1c, 0xa3, 0x87, 0xdb, 0x6a, 0x29, 0x6e,
	0xa8, 0x12, 0xb0, 0x2b, 0x19, 0x84, 0x34, 0xb9, 0xb8, 0x3d, 0x52, 0x13, 0x73, 0x4a, 0x32, 0x9c,
	0x33, 0x52, 0x93, 0xb3, 0x85, 0x90, 0x65, 0xd1, 0x94, 0x26, 0xb1, 0x81, 0x79, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x82, 0xdb, 0x84, 0xc0, 0xfc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AudioDownloadServiceClient is the client API for AudioDownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AudioDownloadServiceClient interface {
	ConvertVideoToAudio(ctx context.Context, in *ConvertVideoToAudioRequest, opts ...grpc.CallOption) (*Void, error)
	HealthCheck(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
}

type audioDownloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioDownloadServiceClient(cc grpc.ClientConnInterface) AudioDownloadServiceClient {
	return &audioDownloadServiceClient{cc}
}

func (c *audioDownloadServiceClient) ConvertVideoToAudio(ctx context.Context, in *ConvertVideoToAudioRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.AudioDownloadService/ConvertVideoToAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioDownloadServiceClient) HealthCheck(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.AudioDownloadService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioDownloadServiceServer is the server API for AudioDownloadService service.
type AudioDownloadServiceServer interface {
	ConvertVideoToAudio(context.Context, *ConvertVideoToAudioRequest) (*Void, error)
	HealthCheck(context.Context, *Void) (*Void, error)
}

// UnimplementedAudioDownloadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAudioDownloadServiceServer struct {
}

func (*UnimplementedAudioDownloadServiceServer) ConvertVideoToAudio(ctx context.Context, req *ConvertVideoToAudioRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertVideoToAudio not implemented")
}
func (*UnimplementedAudioDownloadServiceServer) HealthCheck(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterAudioDownloadServiceServer(s *grpc.Server, srv AudioDownloadServiceServer) {
	s.RegisterService(&_AudioDownloadService_serviceDesc, srv)
}

func _AudioDownloadService_ConvertVideoToAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertVideoToAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioDownloadServiceServer).ConvertVideoToAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AudioDownloadService/ConvertVideoToAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioDownloadServiceServer).ConvertVideoToAudio(ctx, req.(*ConvertVideoToAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioDownloadService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioDownloadServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AudioDownloadService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioDownloadServiceServer).HealthCheck(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _AudioDownloadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AudioDownloadService",
	HandlerType: (*AudioDownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertVideoToAudio",
			Handler:    _AudioDownloadService_ConvertVideoToAudio_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AudioDownloadService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "convert_av.proto",
}
